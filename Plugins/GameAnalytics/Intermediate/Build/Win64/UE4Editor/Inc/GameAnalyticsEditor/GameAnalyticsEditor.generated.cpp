// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/GameAnalyticsEditorPrivatePCH.h"
#include "GameAnalyticsEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1GameAnalyticsEditor() {}
	void UGameAnalyticsProjectSettings::StaticRegisterNativesUGameAnalyticsProjectSettings()
	{
	}
	IMPLEMENT_CLASS(UGameAnalyticsProjectSettings, 2989777300);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	GAMEANALYTICSEDITOR_API class UClass* Z_Construct_UClass_UGameAnalyticsProjectSettings_NoRegister();
	GAMEANALYTICSEDITOR_API class UClass* Z_Construct_UClass_UGameAnalyticsProjectSettings();
	GAMEANALYTICSEDITOR_API class UPackage* Z_Construct_UPackage__Script_GameAnalyticsEditor();
	UClass* Z_Construct_UClass_UGameAnalyticsProjectSettings_NoRegister()
	{
		return UGameAnalyticsProjectSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameAnalyticsProjectSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_GameAnalyticsEditor();
			OuterClass = UGameAnalyticsProjectSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(VerboseLogBuild, UGameAnalyticsProjectSettings, bool);
				UProperty* NewProp_VerboseLogBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerboseLogBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VerboseLogBuild, UGameAnalyticsProjectSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(VerboseLogBuild, UGameAnalyticsProjectSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(InfoLogBuild, UGameAnalyticsProjectSettings, bool);
				UProperty* NewProp_InfoLogBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InfoLogBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InfoLogBuild, UGameAnalyticsProjectSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(InfoLogBuild, UGameAnalyticsProjectSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseCustomId, UGameAnalyticsProjectSettings, bool);
				UProperty* NewProp_UseCustomId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseCustomId"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseCustomId, UGameAnalyticsProjectSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(UseCustomId, UGameAnalyticsProjectSettings), sizeof(bool), true);
				UProperty* NewProp_ResourceItemTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResourceItemTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ResourceItemTypes, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_ResourceItemTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResourceItemTypes, TEXT("ResourceItemTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_ResourceCurrencies = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResourceCurrencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ResourceCurrencies, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_ResourceCurrencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResourceCurrencies, TEXT("ResourceCurrencies"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_CustomDimensions03 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomDimensions03"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CustomDimensions03, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_CustomDimensions03_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CustomDimensions03, TEXT("CustomDimensions03"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_CustomDimensions02 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomDimensions02"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CustomDimensions02, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_CustomDimensions02_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CustomDimensions02, TEXT("CustomDimensions02"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_CustomDimensions01 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomDimensions01"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CustomDimensions01, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_CustomDimensions01_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CustomDimensions01, TEXT("CustomDimensions01"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_WindowsBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindowsBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(WindowsBuild, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_WindowsSecretKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindowsSecretKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(WindowsSecretKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_WindowsGameKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindowsGameKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(WindowsGameKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_MacBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MacBuild, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_MacSecretKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacSecretKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MacSecretKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_MacGameKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacGameKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MacGameKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_AndroidBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AndroidBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(AndroidBuild, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_AndroidSecretKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AndroidSecretKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(AndroidSecretKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_AndroidGameKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AndroidGameKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(AndroidGameKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_IosBuild = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IosBuild"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IosBuild, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_IosSecretKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IosSecretKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IosSecretKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
				UProperty* NewProp_IosGameKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IosGameKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IosGameKey, UGameAnalyticsProjectSettings), 0x0010000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_VerboseLogBuild, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_VerboseLogBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_VerboseLogBuild, TEXT("ToolTip"), TEXT("Show full info messages from GA in builds (f.x. Xcode for iOS). Noet that this option includes long JSON messages sent to the server."));
				MetaData->SetValue(NewProp_InfoLogBuild, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_InfoLogBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_InfoLogBuild, TEXT("ToolTip"), TEXT("Show info messages from GA in builds (f.x. Xcode for iOS)."));
				MetaData->SetValue(NewProp_UseCustomId, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_UseCustomId, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_UseCustomId, TEXT("ToolTip"), TEXT("Use custom id. Define your own custom defined user id to send with events. PLEASE NOTICE: When using custom id you need to remember GameAnalytics will first be fully initialized when you have set the custom id. No events can be sent before GameAnalytics is fully initialized."));
				MetaData->SetValue(NewProp_ResourceItemTypes, TEXT("Category"), TEXT("ResourceTypes"));
				MetaData->SetValue(NewProp_ResourceItemTypes, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_ResourceItemTypes, TEXT("ToolTip"), TEXT("List of Resource Item Types."));
				MetaData->SetValue(NewProp_ResourceCurrencies, TEXT("Category"), TEXT("ResourceTypes"));
				MetaData->SetValue(NewProp_ResourceCurrencies, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_ResourceCurrencies, TEXT("ToolTip"), TEXT("List of Resource Currencies."));
				MetaData->SetValue(NewProp_CustomDimensions03, TEXT("Category"), TEXT("CustomDimensions"));
				MetaData->SetValue(NewProp_CustomDimensions03, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_CustomDimensions03, TEXT("ToolTip"), TEXT("List of custom dimensions 03."));
				MetaData->SetValue(NewProp_CustomDimensions02, TEXT("Category"), TEXT("CustomDimensions"));
				MetaData->SetValue(NewProp_CustomDimensions02, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_CustomDimensions02, TEXT("ToolTip"), TEXT("List of custom dimensions 02."));
				MetaData->SetValue(NewProp_CustomDimensions01, TEXT("Category"), TEXT("CustomDimensions"));
				MetaData->SetValue(NewProp_CustomDimensions01, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_CustomDimensions01, TEXT("ToolTip"), TEXT("List of custom dimensions 01."));
				MetaData->SetValue(NewProp_WindowsBuild, TEXT("Category"), TEXT("WindowsSetup"));
				MetaData->SetValue(NewProp_WindowsBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_WindowsBuild, TEXT("ToolTip"), TEXT("The current version of the Windows game. Updating the build name for each test version of the game will allow you to filter by build when viewing your data on the GA website."));
				MetaData->SetValue(NewProp_WindowsSecretKey, TEXT("Category"), TEXT("WindowsSetup"));
				MetaData->SetValue(NewProp_WindowsSecretKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_WindowsSecretKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Windows Secret Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_WindowsGameKey, TEXT("Category"), TEXT("WindowsSetup"));
				MetaData->SetValue(NewProp_WindowsGameKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_WindowsGameKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Windows Game Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_MacBuild, TEXT("Category"), TEXT("MacSetup"));
				MetaData->SetValue(NewProp_MacBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_MacBuild, TEXT("ToolTip"), TEXT("The current version of the Mac game. Updating the build name for each test version of the game will allow you to filter by build when viewing your data on the GA website."));
				MetaData->SetValue(NewProp_MacSecretKey, TEXT("Category"), TEXT("MacSetup"));
				MetaData->SetValue(NewProp_MacSecretKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_MacSecretKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Mac Secret Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_MacGameKey, TEXT("Category"), TEXT("MacSetup"));
				MetaData->SetValue(NewProp_MacGameKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_MacGameKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Mac Game Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_AndroidBuild, TEXT("Category"), TEXT("AndroidSetup"));
				MetaData->SetValue(NewProp_AndroidBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_AndroidBuild, TEXT("ToolTip"), TEXT("The current version of the game. Updating the build name for each test version of the game will allow you to filter by build when viewing your data on the GA website."));
				MetaData->SetValue(NewProp_AndroidSecretKey, TEXT("Category"), TEXT("AndroidSetup"));
				MetaData->SetValue(NewProp_AndroidSecretKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_AndroidSecretKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Android Secret Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_AndroidGameKey, TEXT("Category"), TEXT("AndroidSetup"));
				MetaData->SetValue(NewProp_AndroidGameKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_AndroidGameKey, TEXT("ToolTip"), TEXT("Your GameAnalytics Android Game Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_IosBuild, TEXT("Category"), TEXT("IosSetup"));
				MetaData->SetValue(NewProp_IosBuild, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_IosBuild, TEXT("ToolTip"), TEXT("The current version of the iOS game. Updating the build name for each test version of the game will allow you to filter by build when viewing your data on the GA website."));
				MetaData->SetValue(NewProp_IosSecretKey, TEXT("Category"), TEXT("IosSetup"));
				MetaData->SetValue(NewProp_IosSecretKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_IosSecretKey, TEXT("ToolTip"), TEXT("Your GameAnalytics iOS Secret Key - copy/paste from the GA website or log in to autofill it."));
				MetaData->SetValue(NewProp_IosGameKey, TEXT("Category"), TEXT("IosSetup"));
				MetaData->SetValue(NewProp_IosGameKey, TEXT("ModuleRelativePath"), TEXT("Public/GameAnalyticsProjectSettings.h"));
				MetaData->SetValue(NewProp_IosGameKey, TEXT("ToolTip"), TEXT("Your GameAnalytics iOS Game Key - copy/paste from the GA website or log in to autofill it."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameAnalyticsProjectSettings(Z_Construct_UClass_UGameAnalyticsProjectSettings, &UGameAnalyticsProjectSettings::StaticClass, TEXT("UGameAnalyticsProjectSettings"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameAnalyticsProjectSettings);
	UPackage* Z_Construct_UPackage__Script_GameAnalyticsEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GameAnalyticsEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000080);
			FGuid Guid;
			Guid.A = 0xB8F763F6;
			Guid.B = 0x321DF750;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
